@page "/contactos"
@using BlazorContactos.Shared.DTOs.Contactos
@using BlazorContactos.Shared.DTOs.MediosContactos

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Contactos</h3>

<div class="row justify-content-end">
    <div class="col-lg-3 text-end">
        <button type="button" class="btn btn-success" @onclick=@(() => navigationManager.NavigateTo("contacto"))>Agregar</button>
    </div>
</div>

@if (contactos == null)
{
    <h1>Cargando...</h1>
}
else if (contactos.Count == 0)
{
    <h1>No se encontraron contactos registrados...</h1>
}
else
{
    <div class="table-responsive">
        <table class="table text-center table-hover">
            <thead class="table-striped">
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contacto in contactos)
                {
                    <tr>
                        <td>@contacto.Id</td>
                        <td>@contacto.Nombre</td>

                        <td>
                            <button class="btn btn-primary" type="button" @onclick=@(() => navigationManager.NavigateTo($"contacto/{contacto.Id}"))>Editar</button>
                            <button class="btn btn-danger" type="button" @onclick="@(() => Eliminar(contacto))">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    protected List<ContactoDTO> contactos;

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetFromJsonAsync<List<ContactoDTO>>("api/contactos");
        if (response != null)
        {
            contactos = response;
        }
    }

    protected async Task Eliminar(ContactoDTO contacto)
    {
        await httpClient.DeleteAsync($"api/contactos/{contacto.Id}");
        contactos.Remove(contacto);
    }
}
